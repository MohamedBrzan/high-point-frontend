{"version":3,"file":"static/js/173.6951b9cf.chunk.js","mappings":"8WAwJA,UAhIkB,WAChB,IAAQA,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KAE5B,GAAmCC,EAAAA,EAAAA,MAAsB,eAAlDC,EAAS,KAAIC,EAAS,KAATA,UAEdC,EAAc,SAACC,GAAC,OAAKA,EAAEC,OAAOC,KAAM,EAEpCC,EAAa,yCAAG,WAAOH,GAAC,4EAKT,OAJbI,EAAO,CACXZ,MAAAA,EACAE,SAAAA,GAEFM,EAAEK,iBAAiB,kBAEXR,GAAU,UAAKO,IAAQE,MAAK,SAACC,GAC7BA,EAASH,MACXf,GAASmB,EAAAA,EAAAA,GAAWD,EAASH,KAAKK,OAClCC,EAAAA,GAAAA,QAAc,0BAA2B,CACvCC,SAAU,eAEZxB,EAAS,MAETuB,EAAAA,GAAAA,MAAYH,EAASK,MAAMR,KAAKS,QAAS,CACvCF,SAAU,cAGhB,IAAG,KAAD,kDAEFD,EAAAA,GAAAA,MAAY,KAAMG,QAAS,CACzBF,SAAU,eACT,yDAEN,gBAzBkB,sCA2BnB,OACE,qBAASG,UAAU,0BAAyB,WAC1C,SAAC,IAAS,qBACV,UAAC,IAAG,CAACA,UAAU,mBAAkB,WAC/B,UAAC,IAAG,CAACC,GAAI,EAAGD,UAAU,WAAU,WAC9B,gBAAKA,UAAU,OAAM,UACnB,SAAC,EAAAE,KAAI,CAACC,GAAG,IAAG,UACV,gBAAKC,IAAKC,EAAAA,EAAMC,IAAI,OAAON,UAAU,uBAGzC,gBAAKA,UAAU,YAAW,UACxB,gBAAKA,UAAU,cAAa,SAAE7B,EAAE,6BAElC,SAAC,IAAS,CAACoC,MAAO,KAAMP,UAAU,OAAM,UACtC,UAAC,IAAI,CAACQ,SAAU,SAACtB,GAAC,OAAKG,EAAcH,EAAE,EAAC,WACtC,UAAC,IAAS,CAACc,UAAU,OAAM,WACzB,SAAC,IAAS,UAAE7B,EAAE,qCACd,SAAC,IAAW,CACVsC,SAAUzB,EAEV0B,UAAQ,EACRC,KAAK,QACLC,KAAK,QACLxB,MAAOV,EACPmC,SAAU,SAAC3B,GAAC,OAAKP,EAASM,EAAYC,GAAG,EACzC4B,YAAa3C,EAAE,+CAGnB,UAAC,IAAS,CAAC6B,UAAU,OAAM,WACzB,SAAC,IAAS,UAAE7B,EAAE,wCACd,SAAC,IAAW,CACVsC,SAAUzB,EAEV0B,UAAQ,EACRC,KAAK,WACLC,KAAK,WACLxB,MAAOR,EACPiC,SAAU,SAAC3B,GAAC,OAAKL,EAAYI,EAAYC,GAAG,EAC5C4B,YAAa3C,EAAE,kDAInB,SAAC,IAAM,CACLsC,SAAUzB,EAEV2B,KAAK,SACLX,UAAU,kBAAiB,SAE1B7B,EAAE,oCAEL,cAAG6B,UAAU,mBAAkB,SAAE7B,EAAE,cAMnC,UAAC,IAAG,WACD,KACD,UAAC,IAAG,WACD,KACD,UAAC,EAAA+B,KAAI,CACHC,GAAG,2BACHH,UAAU,oBAAmB,UAE5B,IACA7B,EAAE,4CAGP,UAAC,IAAG,WACD,KACD,UAAC,EAAA+B,KAAI,CACHC,GAAG,kCACHH,UAAU,oBAAmB,UAE5B,IACA7B,EAAE,oDAOf,SAAC,IAAG,CAAC8B,GAAI,EAAGD,UAAU,eAAc,UAClC,gBAAKI,IAAKW,EAAWT,IAAI,aAAaN,UAAU,oBAK1D,C","sources":["pages/Authentication/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { useDispatch } from 'react-redux';\r\nimport authImage from '../../images/auth.png';\r\nimport logo from '../../images/auth_logo.svg';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Authentication.css';\r\nimport { toast } from 'react-toastify';\r\nimport { createUser } from '../../store/reducers/User/UserSlice';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport {\r\n  useGoogleLoginUserMutation,\r\n  useLoginUserMutation,\r\n} from '../../store/apis/User/User';\r\n// import GoogleLoginButton from './GoogleLoginButton';\r\nimport PageTitle from '../../utils/PageTitle';\r\n\r\nconst LoginPage = () => {\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [loginUser, { isLoading }] = useLoginUserMutation();\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const loginUserData = async (e) => {\r\n    const data = {\r\n      email,\r\n      password,\r\n    };\r\n    e.preventDefault();\r\n    try {\r\n      await loginUser({ ...data }).then((response) => {\r\n        if (response.data) {\r\n          dispatch(createUser(response.data.user));\r\n          toast.success('User Login successfully', {\r\n            position: 'top-center',\r\n          });\r\n          navigate('/');\r\n        } else {\r\n          toast.error(response.error.data.message, {\r\n            position: 'top-center',\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className='authentication register'>\r\n      <PageTitle>Login</PageTitle>\r\n      <Row className='auth_content_row'>\r\n        <Col md={6} className='text_col'>\r\n          <div className='logo'>\r\n            <Link to='/'>\r\n              <img src={logo} alt='LOGO' className='auth_logo_img' />\r\n            </Link>\r\n          </div>\r\n          <div className='head_text'>\r\n            <div className='login_title'>{t('authentication.login')}</div>\r\n          </div>\r\n          <Container fluid={'sm'} className='mt-3'>\r\n            <Form onSubmit={(e) => loginUserData(e)}>\r\n              <FormGroup className='mb-4'>\r\n                <FormLabel>{t('authentication.form.email.text')}</FormLabel>\r\n                <FormControl\r\n                  disabled={isLoading}\r\n                  // disabled={isLoading || userLogging}\r\n                  required\r\n                  type='email'\r\n                  name='email'\r\n                  value={email}\r\n                  onChange={(e) => setEmail(changeValue(e))}\r\n                  placeholder={t('authentication.form.email.placeholder')}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup className='mb-4'>\r\n                <FormLabel>{t('authentication.form.password.text')}</FormLabel>\r\n                <FormControl\r\n                  disabled={isLoading}\r\n                  // disabled={isLoading || userLogging}\r\n                  required\r\n                  type='password'\r\n                  name='password'\r\n                  value={password}\r\n                  onChange={(e) => setPassword(changeValue(e))}\r\n                  placeholder={t('authentication.form.password.placeholder')}\r\n                />\r\n              </FormGroup>\r\n\r\n              <Button\r\n                disabled={isLoading}\r\n                // disabled={isLoading || userLogging}\r\n                type='submit'\r\n                className='auth_submit_btn'\r\n              >\r\n                {t('authentication.form.login_btn')}\r\n              </Button>\r\n              <p className='text-center my-3'>{t('or_text')}</p>\r\n\r\n              {/* <GoogleLoginButton\r\n              // googleLogin={googleLogin}\r\n              /> */}\r\n\r\n              <Row>\r\n                {' '}\r\n                <Col>\r\n                  {' '}\r\n                  <Link\r\n                    to='/authentication/register'\r\n                    className='have_account_link'\r\n                  >\r\n                    {' '}\r\n                    {t('authentication.have_account.login')}\r\n                  </Link>\r\n                </Col>\r\n                <Col>\r\n                  {' '}\r\n                  <Link\r\n                    to='/authentication/forgot_password'\r\n                    className='have_account_link'\r\n                  >\r\n                    {' '}\r\n                    {t('authentication.forgot_password')}\r\n                  </Link>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </Container>\r\n        </Col>\r\n        <Col md={6} className='auth_img_col'>\r\n          <img src={authImage} alt='AUTH_IMAGE' className='auth_img' />\r\n        </Col>\r\n      </Row>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["t","useTranslation","navigate","useNavigate","dispatch","useDispatch","useState","email","setEmail","password","setPassword","useLoginUserMutation","loginUser","isLoading","changeValue","e","target","value","loginUserData","data","preventDefault","then","response","createUser","user","toast","position","error","message","className","md","Link","to","src","logo","alt","fluid","onSubmit","disabled","required","type","name","onChange","placeholder","authImage"],"sourceRoot":""}