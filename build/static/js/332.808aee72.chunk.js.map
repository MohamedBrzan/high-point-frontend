{"version":3,"file":"static/js/332.808aee72.chunk.js","mappings":"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","sources":["pages/Quote/helpers/decision/CreateDecisionForm.js","pages/Quote/helpers/decision/EditDecisionForm.js","pages/Quote/helpers/QAndA/CreateQAndAForm.js","pages/Quote/helpers/QAndA/EditQAndAForm.js","pages/Quote/helpers/EditQuoteForm.js","pages/Quote/helpers/CreateQuoteForm.js","pages/Quote/Quote.js"],"sourcesContent":["import { faCirclePlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport { useCreateDecisionMutation } from '../../../../store/apis/Quote/Quote';\r\nimport CustomSpinner from '../../../../utils/CustomSpinner/CustomSpinner';\r\n\r\nconst CreateDecisionForm = ({ quote, refetchQuote }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [makeNewDecision, { isLoading }] = useCreateDecisionMutation();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [name, setName] = useState('');\r\n  const [nameAr, setNameAr] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const createNewQuote = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const data = {\r\n        name,\r\n        name_ar: nameAr,\r\n      };\r\n\r\n      await makeNewDecision({ quote_id: quote._id, ...data }).then(\r\n        (response) => {\r\n          if (response.data) {\r\n            toast.success(t('create_success'), {\r\n              position: 'top-center',\r\n            });\r\n\r\n            setName('');\r\n            setNameAr('');\r\n\r\n            handleClose();\r\n            return refetchQuote();\r\n          } else {\r\n            return toast.error(response.error.data.message, {\r\n              position: 'top-center',\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      return toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <CustomSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        md={6}\r\n        style={i18n.language === 'en' ? { left: '-2.3em' } : { right: '-2.3em' }}\r\n        className='create_btn'\r\n        onClick={handleShow}\r\n        title={t('hpt_page.card.title', {\r\n          en: 'Create New Decision',\r\n          ar: 'أنشاء قرار جديد',\r\n        })}\r\n      >\r\n        <FontAwesomeIcon icon={faCirclePlus} size='2x' />\r\n      </div>\r\n\r\n      <Modal\r\n        show={show}\r\n        size='xl'\r\n        onHide={handleClose}\r\n        backdrop='static'\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {t('hpt_page.card.title', {\r\n              en: 'Create New Decision',\r\n              ar: 'أنشاء قرار جديد',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => createNewQuote(e)}>\r\n            <Row>\r\n              <Col md={6}>\r\n                {' '}\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.text')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    as='textarea'\r\n                    rows='5'\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={name}\r\n                    onChange={(e) => setName(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.text')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={nameAr}\r\n                    onChange={(e) => setNameAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Button disabled={isLoading} type='submit'>\r\n              {t('create_btn')}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateDecisionForm;\r\n","import { faCirclePlus, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport { useUpdateDecisionMutation } from '../../../../store/apis/Quote/Quote';\r\nimport CustomSpinner from '../../../../utils/CustomSpinner/CustomSpinner';\r\n\r\nconst EditDecisionForm = ({ quote, decision, refetchQuote }) => {\r\n  const { t } = useTranslation();\r\n  const [editDecision, { isLoading }] = useUpdateDecisionMutation();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [name, setName] = useState('');\r\n  const [nameAr, setNameAr] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const updateNewQuote = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const data = {\r\n        name,\r\n        name_ar: nameAr,\r\n      };\r\n\r\n      await editDecision({\r\n        quote_id: quote._id,\r\n        decision_id: decision._id,\r\n        ...data,\r\n      }).then((response) => {\r\n        if (response.data) {\r\n          toast.success(t('update_success'), {\r\n            position: 'top-center',\r\n          });\r\n\r\n          handleClose();\r\n          return refetchQuote();\r\n        } else {\r\n          return toast.error(response.error.data.message, {\r\n            position: 'top-center',\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setName(decision.name);\r\n    setNameAr(decision.name_ar);\r\n  }, [decision.name, decision.name_ar]);\r\n\r\n  if (isLoading) return <CustomSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        md={6}\r\n        className='update_btn'\r\n        onClick={handleShow}\r\n        title={t('hpt_page.card.title', {\r\n          en: 'update New Decision',\r\n          ar: 'أنشاء قرار جديد',\r\n        })}\r\n      >\r\n        <FontAwesomeIcon icon={faEdit} size='1x' />\r\n      </div>\r\n\r\n      <Modal\r\n        show={show}\r\n        size='xl'\r\n        onHide={handleClose}\r\n        backdrop='static'\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {t('hpt_page.card.title', {\r\n              en: 'update New Decision',\r\n              ar: 'أنشاء قرار جديد',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => updateNewQuote(e)}>\r\n            <Row>\r\n              <Col md={6}>\r\n                {' '}\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.text')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    as='textarea'\r\n                    rows='5'\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={name}\r\n                    onChange={(e) => setName(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.text')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={nameAr}\r\n                    onChange={(e) => setNameAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Button disabled={isLoading} type='submit'>\r\n              {t('save_btn')}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditDecisionForm;\r\n","import { faCirclePlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport { useCreateQAMutation } from '../../../../store/apis/Quote/Quote';\r\nimport CustomSpinner from '../../../../utils/CustomSpinner/CustomSpinner';\r\n\r\nconst CreateQAndAForm = ({ quote, refetchQuote }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [makeNewQA, { isLoading }] = useCreateQAMutation();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [question, setQuestion] = useState('');\r\n  const [questionAr, setQuestionAr] = useState('');\r\n  const [answer, setAnswer] = useState('');\r\n  const [answerAr, setAnswerAr] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const createNewQuote = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const data = {\r\n        question,\r\n        question_ar: questionAr,\r\n        answer,\r\n        answer_ar: answerAr,\r\n      };\r\n\r\n      await makeNewQA({ quote_id: quote._id, ...data }).then((response) => {\r\n        if (response.data) {\r\n          toast.success(t('create_success'), {\r\n            position: 'top-center',\r\n          });\r\n\r\n          setQuestion('');\r\n          setQuestionAr('');\r\n          setAnswer('');\r\n          setAnswerAr('');\r\n\r\n          handleClose();\r\n          return refetchQuote();\r\n        } else {\r\n          return toast.error(response.error.data.message, {\r\n            position: 'top-center',\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <CustomSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        md={6}\r\n        style={\r\n          i18n.language === 'en' ? { left: '-2.3em' } : { right: '-2.3em' }\r\n        }\r\n        className='create_btn'\r\n        onClick={handleShow}\r\n        title={t('hpt_page.card.title', {\r\n          en: 'Create Q&A',\r\n          ar: 'أنشاء سؤال وجواب جديد',\r\n        })}\r\n      >\r\n        <FontAwesomeIcon icon={faCirclePlus} size='2x' />\r\n      </div>\r\n\r\n      <Modal\r\n        show={show}\r\n        size='xl'\r\n        onHide={handleClose}\r\n        backdrop='static'\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {t('hpt_page.card.title', {\r\n              en: 'Create Q&A',\r\n              ar: 'أنشاء سؤال وجواب جديد',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => createNewQuote(e)}>\r\n            <Row>\r\n              <Col md={6}>\r\n                {' '}\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.question')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={question}\r\n                    onChange={(e) => setQuestion(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.question')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={questionAr}\r\n                    onChange={(e) => setQuestionAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                {' '}\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.answer')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={answer}\r\n                    onChange={(e) => setAnswer(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.answer')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={answerAr}\r\n                    onChange={(e) => setAnswerAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Button disabled={isLoading} type='submit'>\r\n              {t('create_btn')}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateQAndAForm;\r\n","import { faCirclePlus, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport { useUpdateQAMutation } from '../../../../store/apis/Quote/Quote';\r\nimport CustomSpinner from '../../../../utils/CustomSpinner/CustomSpinner';\r\n\r\nconst EditQAndAForm = ({ quote, QA, refetchQuote }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [updateQA, { isLoading }] = useUpdateQAMutation();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [question, setQuestion] = useState('');\r\n  const [questionAr, setQuestionAr] = useState('');\r\n  const [answer, setAnswer] = useState('');\r\n  const [answerAr, setAnswerAr] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const createNewQuote = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const data = {\r\n        question,\r\n        question_ar: questionAr,\r\n        answer,\r\n        answer_ar: answerAr,\r\n      };\r\n\r\n      await updateQA({ quote_id: quote._id, q_a_id: QA._id, ...data }).then(\r\n        (response) => {\r\n          if (response.data) {\r\n            toast.success(t('update_success'), {\r\n              position: 'top-center',\r\n            });\r\n\r\n            handleClose();\r\n            return refetchQuote();\r\n          } else {\r\n            return toast.error(response.error.data.message, {\r\n              position: 'top-center',\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      return toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuestion(QA.question);\r\n    setQuestionAr(QA.question_ar);\r\n    setAnswer(QA.answer);\r\n    setAnswerAr(QA.answer_ar);\r\n  }, [QA.answer, QA.answer_ar, QA.question, QA.question_ar]);\r\n\r\n  if (isLoading) return <CustomSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={\r\n          i18n.language === 'en' ? { left: '-2.3em' } : { right: '-2.3em' }\r\n        }\r\n        className='edit_btn'\r\n        onClick={handleShow}\r\n        title={t('hpt_page.card.title', {\r\n          en: 'Edit Q&A',\r\n          ar: 'تعديل سؤال وجواب',\r\n        })}\r\n      >\r\n        <FontAwesomeIcon icon={faEdit} size='1x' />\r\n      </div>\r\n\r\n      <Modal\r\n        show={show}\r\n        size='xl'\r\n        onHide={handleClose}\r\n        backdrop='static'\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {t('hpt_page.card.title', {\r\n              en: 'Edit Q&A',\r\n              ar: 'تعديل سؤال وجواب',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => createNewQuote(e)}>\r\n            <Row>\r\n              <Col md={6}>\r\n                {' '}\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.question')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={question}\r\n                    onChange={(e) => setQuestion(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.question')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={questionAr}\r\n                    onChange={(e) => setQuestionAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                {' '}\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.answer')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={answer}\r\n                    onChange={(e) => setAnswer(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.answer')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    disabled={isLoading}\r\n                    value={answerAr}\r\n                    onChange={(e) => setAnswerAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Button disabled={isLoading} type='submit'>\r\n              {t('save_btn')}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditQAndAForm;\r\n","import { faCirclePlus, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport CustomSpinner from '../../../utils/CustomSpinner/CustomSpinner';\r\nimport { useUpdateQuoteMutation } from '../../../store/apis/Quote/Quote';\r\n\r\nconst EditQuoteForm = ({ quote, refetchQuote }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [updateQuote, { isLoading }] = useUpdateQuoteMutation();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [titleAr, setTitleAr] = useState('');\r\n  const [subTitle, setSubTitle] = useState('');\r\n  const [subTitleAr, setSubTitleAr] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [descriptionAr, setDescriptionAr] = useState('');\r\n  const [ruleText, setRuleText] = useState('');\r\n  const [ruleTextAr, setRuleTextAr] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const updateQuoteData = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const data = {\r\n        title,\r\n        title_ar: titleAr,\r\n        sub_title: subTitle,\r\n        sub_title_ar: subTitleAr,\r\n        description,\r\n        description_ar: descriptionAr,\r\n        rule_text: ruleText,\r\n        rule_text_ar: ruleTextAr,\r\n      };\r\n\r\n      await updateQuote({ quote_id: quote._id, ...data }).then((response) => {\r\n        if (response.data) {\r\n          toast.success(t('update_success'), {\r\n            position: 'top-center',\r\n          });\r\n\r\n          handleClose();\r\n          return refetchQuote();\r\n        } else {\r\n          return toast.error(response.error.data.message, {\r\n            position: 'top-center',\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTitle(quote.title);\r\n    setTitleAr(quote.title_ar);\r\n    setSubTitle(quote.sub_title);\r\n    setSubTitleAr(quote.sub_title_ar);\r\n    setDescription(quote.description);\r\n    setDescriptionAr(quote.description_ar);\r\n    setRuleText(quote.rule_text);\r\n    setRuleTextAr(quote.rule_text_ar);\r\n  }, [\r\n    quote.description,\r\n    quote.description_ar,\r\n    quote.rule_text,\r\n    quote.rule_text_ar,\r\n    quote.sub_title,\r\n    quote.sub_title_ar,\r\n    quote.title,\r\n    quote.title_ar,\r\n  ]);\r\n\r\n  if (isLoading) return <CustomSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={\r\n          i18n.language === 'en' ? { left: '-2.3em' } : { right: '-2.3em' }\r\n        }\r\n        className='update_btn'\r\n        onClick={handleShow}\r\n        title={t('hpt_page.card.title', {\r\n          en: 'Edit Quote',\r\n          ar: 'تعديل الحكمة',\r\n        })}\r\n      >\r\n        <FontAwesomeIcon icon={faEdit} size='3x' />\r\n      </div>\r\n\r\n      <Modal\r\n        show={show}\r\n        size='xl'\r\n        onHide={handleClose}\r\n        backdrop='static'\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {t('hpt_page.card.title', {\r\n              en: 'Edit Quote',\r\n              ar: 'تعديل الحكمة',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => updateQuoteData(e)}>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.title')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={title}\r\n                    onChange={(e) => setTitle(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.title')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={titleAr}\r\n                    onChange={(e) => setTitleAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.sub_title')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={subTitle}\r\n                    onChange={(e) => setSubTitle(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.sub_title')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={subTitleAr}\r\n                    onChange={(e) => setSubTitleAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.description')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.description')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={descriptionAr}\r\n                    onChange={(e) => setDescriptionAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.rule_text')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={ruleText}\r\n                    onChange={(e) => setRuleText(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.rule_text')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={ruleTextAr}\r\n                    onChange={(e) => setRuleTextAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Button disabled={isLoading} type='submit'>\r\n              {t('save_btn')}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditQuoteForm;\r\n","import { faCirclePlus, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'react-toastify';\r\nimport CustomSpinner from '../../../utils/CustomSpinner/CustomSpinner';\r\nimport { useCreateQuoteMutation } from '../../../store/apis/Quote/Quote';\r\n\r\nconst CreateQuoteForm = ({ refetch }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [makeNewQuote, { isLoading }] = useCreateQuoteMutation();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [titleAr, setTitleAr] = useState('');\r\n  const [subTitle, setSubTitle] = useState('');\r\n  const [subTitleAr, setSubTitleAr] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [descriptionAr, setDescriptionAr] = useState('');\r\n  const [ruleText, setRuleText] = useState('');\r\n  const [ruleTextAr, setRuleTextAr] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const createNewQuote = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const data = {\r\n        title,\r\n        title_ar: titleAr,\r\n        sub_title: subTitle,\r\n        sub_title_ar: subTitleAr,\r\n        description,\r\n        description_ar: descriptionAr,\r\n        rule_text: ruleText,\r\n        rule_text_ar: ruleTextAr,\r\n      };\r\n\r\n      await makeNewQuote({ ...data }).then((response) => {\r\n        if (response.data) {\r\n          toast.success(t('update_success'), {\r\n            position: 'top-center',\r\n          });\r\n\r\n          handleClose();\r\n          return refetch();\r\n        } else {\r\n          return toast.error(response.error.data.message, {\r\n            position: 'top-center',\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <CustomSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={\r\n          i18n.language === 'en' ? { left: '-2.3em' } : { right: '-2.3em' }\r\n        }\r\n        className='create_btn'\r\n        onClick={handleShow}\r\n        title={t('hpt_page.card.title', {\r\n          en: 'Create Quote',\r\n          ar: 'إنشاء الحكمة',\r\n        })}\r\n      >\r\n        <FontAwesomeIcon icon={faCirclePlus} size='3x' />\r\n      </div>\r\n\r\n      <Modal\r\n        show={show}\r\n        size='xl'\r\n        onHide={handleClose}\r\n        backdrop='static'\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {t('hpt_page.card.title', {\r\n              en: 'Create Quote',\r\n              ar: 'إنشاء الحكمة',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => createNewQuote(e)}>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.title')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={title}\r\n                    onChange={(e) => setTitle(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.title')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={titleAr}\r\n                    onChange={(e) => setTitleAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.sub_title')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={subTitle}\r\n                    onChange={(e) => setSubTitle(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.sub_title')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={subTitleAr}\r\n                    onChange={(e) => setSubTitleAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.description')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.description')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={descriptionAr}\r\n                    onChange={(e) => setDescriptionAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.rule_text')} ( EN )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={ruleText}\r\n                    onChange={(e) => setRuleText(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md={6}>\r\n                <FormGroup className='mb-3'>\r\n                  <FormLabel className='head_label'>\r\n                    {t('identifier_text_name.rule_text')} ( AR )\r\n                  </FormLabel>\r\n                  <FormControl\r\n                    required\r\n                    as='textarea'\r\n                    rows='5'\r\n                    disabled={isLoading}\r\n                    value={ruleTextAr}\r\n                    onChange={(e) => setRuleTextAr(changeValue(e))}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Button disabled={isLoading} type='submit'>\r\n              {t('create_btn')}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateQuoteForm;\r\n","import React, { useRef, useState } from 'react';\r\nimport { Col, Form, FormControl, FormGroup, Row } from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport arrow from '../../images/title_arrow.svg';\r\nimport arrowAr from '../../images/title_arrow_ar.svg';\r\nimport './Quote.css';\r\nimport { toast } from 'react-toastify';\r\nimport StyledButton from '../../common/StyledButton/StyledButton';\r\nimport {\r\n  useDeleteDecisionMutation,\r\n  useDeleteQAMutation,\r\n  useGetAllQuotesQuery,\r\n  useGetQuoteByIdQuery,\r\n} from '../../store/apis/Quote/Quote';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faAnglesDown,\r\n  faCheck,\r\n  faPlus,\r\n  faTrash,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { useEffect } from 'react';\r\nimport CreateDecisionForm from './helpers/decision/CreateDecisionForm';\r\nimport EditDecisionForm from './helpers/decision/EditDecisionForm';\r\nimport CreateQAndAForm from './helpers/QAndA/CreateQAndAForm';\r\nimport EditQAndAForm from './helpers/QAndA/EditQAndAForm';\r\nimport EditQuoteForm from './helpers/EditQuoteForm';\r\nimport CreateQuoteForm from './helpers/CreateQuoteForm';\r\nimport { useCreateRequestMutation } from '../../store/apis/Request/Request';\r\nimport { useSelector } from 'react-redux';\r\n// import NuclearAnimation from '../../anim/NuclearAnimation/NuclearAnimation';\r\nimport RemoveForMoreThanId from '../../functions/RemoveForMoreThanId';\r\nimport PageTitle from '../../utils/PageTitle';\r\n\r\nconst Quote = () => {\r\n  const { t, i18n } = useTranslation();\r\n  const { user } = useSelector((state) => state.user);\r\n  const isAdmin = user && user.isAdmin && user.isAdmin === true;\r\n\r\n  const { data: allQuotes, isLoading, refetch } = useGetAllQuotesQuery();\r\n\r\n  const {\r\n    data: quote,\r\n    isSuccess: quoteIsSuccess,\r\n    refetch: refetchQuote,\r\n  } = useGetQuoteByIdQuery(\r\n    allQuotes && allQuotes[0] && allQuotes[0]._id ? allQuotes[0]._id : ''\r\n  );\r\n  const [deleteDecision] = useDeleteDecisionMutation();\r\n  const [deleteQA] = useDeleteQAMutation();\r\n  const [createRequest] = useCreateRequestMutation();\r\n\r\n  const decisionSelectedValueRef = useRef();\r\n  const decisionValueRef = useRef();\r\n\r\n  const checkBox = useRef();\r\n  const checkIcon = useRef();\r\n\r\n  const closeCustomSelectedForm = (e) => {\r\n    decisionSelectedValueRef.current.classList.add('d-none');\r\n    setSelectedValue(e.target.textContent);\r\n  };\r\n\r\n  const toggleCustomSelectedForm = () =>\r\n    decisionSelectedValueRef.current.classList.toggle('d-none');\r\n\r\n  const toggleChecked = () => checkIcon.current.classList.toggle('d-none');\r\n\r\n  const [selectedValue, setSelectedValue] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  const changeValue = (e) => e.target.value;\r\n\r\n  const data = {\r\n    name: selectedValue,\r\n    email,\r\n    phone: phone,\r\n  };\r\n\r\n  const SendRequest = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      if (!selectedValue) {\r\n        return toast.error(t('selected_value_error'), {\r\n          position: 'top-center',\r\n        });\r\n      } else if (\r\n        document\r\n          .querySelector('.rule .check_box .check_icon')\r\n          .classList.contains('d-none')\r\n      ) {\r\n        return toast.error(t('rule_error'), {\r\n          position: 'top-center',\r\n        });\r\n      }\r\n      await createRequest({ ...data }).then((response) => {\r\n        if (response.data) {\r\n          toast.success(t('create_success'), {\r\n            position: 'top-center',\r\n          });\r\n          setSelectedValue('');\r\n          setEmail('');\r\n          setPhone('');\r\n        } else {\r\n          toast.error(response.error.data.message, {\r\n            position: 'top-center',\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      toast.error(error.message, {\r\n        position: 'top-center',\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (quoteIsSuccess) {\r\n      const allQuestions = document.querySelectorAll('.quote_form .question');\r\n      const allAnswers = document.querySelectorAll('.quote_form .answer');\r\n\r\n      allAnswers.forEach((answer) => answer.classList.remove('active'));\r\n      allQuestions.forEach((question) => {\r\n        question.onclick = () => {\r\n          question.nextElementSibling.classList.toggle('active');\r\n          question.children[0].style.transform += 'rotate(90deg)';\r\n        };\r\n      });\r\n    }\r\n  }, [quoteIsSuccess]);\r\n\r\n  return (\r\n    <section className='quote_form'>\r\n      <PageTitle>Quote</PageTitle>\r\n      <div className='section-head-image'></div>\r\n      {/* <div className='nuclear_canvas_container'>{NuclearAnimation()}</div> */}\r\n      <Row className='quote_row'>\r\n        <Col md={3}>\r\n          {isAdmin ? (\r\n            quote && quote._id ? (\r\n              <EditQuoteForm quote={quote} refetchQuote={refetchQuote} />\r\n            ) : (\r\n              <CreateQuoteForm refetch={refetch} />\r\n            )\r\n          ) : null}\r\n        </Col>\r\n        {quote && quote._id && (\r\n          <Col md={9}>\r\n            <Row>\r\n              {' '}\r\n              <Col md={5}>\r\n                {' '}\r\n                <div className='form_section'>\r\n                  <div className='title'>\r\n                    <div>\r\n                      {' '}\r\n                      {t('hpt_page.quote_page.title', {\r\n                        en: quote.title,\r\n                        ar: quote.title_ar,\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                  <div className='sub_title'>\r\n                    <div className='arrow_container'>\r\n                      {' '}\r\n                      {i18n.language === 'en' ? (\r\n                        <img\r\n                          src={arrow}\r\n                          alt='ARROW_IMG'\r\n                          className='arrow_img'\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          src={arrowAr}\r\n                          alt='ARROW_IMG'\r\n                          className='arrow_img'\r\n                        />\r\n                      )}\r\n                    </div>{' '}\r\n                    {t('hpt_page.quote_page.sub_title', {\r\n                      en: quote.sub_title,\r\n                      ar: quote.sub_title_ar,\r\n                    })}\r\n                  </div>\r\n                  <p>\r\n                    {' '}\r\n                    {t('hpt_page.quote_page.sub_title', {\r\n                      en: quote.description,\r\n                      ar: quote.description_ar,\r\n                    })}\r\n                  </p>\r\n                  <Form onSubmit={(e) => SendRequest(e)} className='form'>\r\n                    {' '}\r\n                    <div className='custom_select_form'>\r\n                      {isAdmin ? (\r\n                        <CreateDecisionForm\r\n                          quote={quote}\r\n                          refetchQuote={refetchQuote}\r\n                        />\r\n                      ) : null}\r\n                      <div\r\n                        className='selected_value'\r\n                        onClick={(e) => toggleCustomSelectedForm(e)}\r\n                      >\r\n                        {selectedValue}\r\n                        <div className='icon'>\r\n                          <FontAwesomeIcon icon={faAnglesDown} size='1x' />\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className='values d-none'\r\n                        ref={decisionSelectedValueRef}\r\n                      >\r\n                        {quote.decisions &&\r\n                          quote.decisions.length > 0 &&\r\n                          quote.decisions.map(\r\n                            ({ _id, name, name_ar }, index) => (\r\n                              <div\r\n                                className='value'\r\n                                key={index}\r\n                                ref={decisionValueRef}\r\n                                onClick={(e) => closeCustomSelectedForm(e)}\r\n                              >\r\n                                {isAdmin ? (\r\n                                  <div className='actions'>\r\n                                    <EditDecisionForm\r\n                                      quote={quote}\r\n                                      decision={{ _id, name, name_ar }}\r\n                                      refetchQuote={refetchQuote}\r\n                                    />\r\n                                    <div\r\n                                      className='delete_btn'\r\n                                      onClick={() => {\r\n                                        const data = {\r\n                                          quote_id: quote._id,\r\n                                          decision_id: _id,\r\n                                        };\r\n\r\n                                        RemoveForMoreThanId(\r\n                                          'decision',\r\n                                          deleteDecision,\r\n                                          data,\r\n                                          refetchQuote\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      <FontAwesomeIcon\r\n                                        icon={faTrash}\r\n                                        size='1x'\r\n                                      />\r\n                                    </div>\r\n                                  </div>\r\n                                ) : null}\r\n                                {t('hpt_page.quote_page.decision_value', {\r\n                                  en: name,\r\n                                  ar: name_ar,\r\n                                })}\r\n                              </div>\r\n                            )\r\n                          )}\r\n                      </div>\r\n                    </div>\r\n                    <FormGroup className='mb-3'>\r\n                      <FormControl\r\n                        type='email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(changeValue(e))}\r\n                        className='quote__form-control'\r\n                        placeholder={t('hpt_page.quote_page.email')}\r\n                        required\r\n                        disabled={isLoading}\r\n                      />\r\n                    </FormGroup>\r\n                    <FormGroup className='mb-3'>\r\n                      <FormControl\r\n                        type='number'\r\n                        value={phone}\r\n                        onChange={(e) => setPhone(changeValue(e))}\r\n                        className='quote__form-control'\r\n                        placeholder={t('hpt_page.quote_page.phone')}\r\n                        required\r\n                        disabled={isLoading}\r\n                      />\r\n                    </FormGroup>{' '}\r\n                    <div className='quote__btn-container'>\r\n                      <button type='submit' className='quote__submit-btn'>\r\n                        {' '}\r\n                        {i18n.language === 'en' ? (\r\n                          <StyledButton\r\n                            color={'white'}\r\n                            borderColor={'white'}\r\n                            borderRightWidth={'.1em'}\r\n                            borderRightColor={'white'}\r\n                          >\r\n                            {t('hpt_page.quote_page.send_message_btn')}\r\n                          </StyledButton>\r\n                        ) : (\r\n                          <StyledButton\r\n                            color={'white'}\r\n                            borderColor={'white'}\r\n                            borderLeftWidth={'.1em'}\r\n                            borderLeftColor={'white'}\r\n                            iconDir='rtl'\r\n                          >\r\n                            {t('hpt_page.quote_page.send_message_btn')}\r\n                          </StyledButton>\r\n                        )}\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                  <div className='rule'>\r\n                    {' '}\r\n                    <div\r\n                      className='check_box'\r\n                      ref={checkBox}\r\n                      onClick={toggleChecked}\r\n                    >\r\n                      <div className='check_icon' ref={checkIcon}>\r\n                        <FontAwesomeIcon icon={faCheck} />\r\n                      </div>\r\n                    </div>\r\n                    <div className='rule_text'>\r\n                      {' '}\r\n                      {t('hpt_page.quote_page.decision_value', {\r\n                        en: quote?.rule_text,\r\n                        ar: quote?.rule_text_ar,\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              <Col md={4} className='QA'>\r\n                {isAdmin ? (\r\n                  <CreateQAndAForm quote={quote} refetchQuote={refetchQuote} />\r\n                ) : null}\r\n                {quote.q_a &&\r\n                  quote.q_a.map(\r\n                    (\r\n                      { _id, question, question_ar, answer, answer_ar },\r\n                      index\r\n                    ) => (\r\n                      <div className='QA_values' key={index}>\r\n                        {isAdmin ? (\r\n                          <div className='actions'>\r\n                            <EditQAndAForm\r\n                              quote={quote}\r\n                              QA={{\r\n                                _id,\r\n                                question,\r\n                                question_ar,\r\n                                answer,\r\n                                answer_ar,\r\n                              }}\r\n                              refetchQuote={refetchQuote}\r\n                            />\r\n                            <div\r\n                              className='delete_btn'\r\n                              onClick={() => {\r\n                                const data = {\r\n                                  quote_id: quote._id,\r\n                                  q_a_id: _id,\r\n                                };\r\n\r\n                                RemoveForMoreThanId(\r\n                                  'q_a',\r\n                                  deleteQA,\r\n                                  data,\r\n                                  refetchQuote\r\n                                );\r\n                              }}\r\n                            >\r\n                              <FontAwesomeIcon icon={faTrash} size='1x' />\r\n                            </div>\r\n                          </div>\r\n                        ) : null}\r\n                        <div className='question'>\r\n                          {t('hpt_page.quote_page.sub_title', {\r\n                            en: question,\r\n                            ar: question_ar,\r\n                          })}\r\n                          <div className='icon'>\r\n                            <FontAwesomeIcon icon={faPlus} size='2x' />\r\n                          </div>\r\n                        </div>\r\n                        <div className='answer'>\r\n                          {' '}\r\n                          {t('hpt_page.quote_page.sub_title', {\r\n                            en: answer,\r\n                            ar: answer_ar,\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n"],"names":["quote","refetchQuote","useTranslation","t","i18n","useCreateDecisionMutation","makeNewDecision","isLoading","useState","show","setShow","handleClose","name","setName","nameAr","setNameAr","changeValue","e","target","value","createNewQuote","preventDefault","data","name_ar","quote_id","_id","then","response","toast","position","error","message","CustomSpinner","md","style","language","left","right","className","onClick","title","en","ar","icon","faCirclePlus","size","Modal","onHide","backdrop","keyboard","closeButton","Form","onSubmit","Row","Col","FormGroup","FormLabel","FormControl","as","rows","required","disabled","onChange","Button","type","decision","useUpdateDecisionMutation","editDecision","updateNewQuote","decision_id","useEffect","faEdit","useCreateQAMutation","makeNewQA","question","setQuestion","questionAr","setQuestionAr","answer","setAnswer","answerAr","setAnswerAr","question_ar","answer_ar","QA","useUpdateQAMutation","updateQA","q_a_id","useUpdateQuoteMutation","updateQuote","setTitle","titleAr","setTitleAr","subTitle","setSubTitle","subTitleAr","setSubTitleAr","description","setDescription","descriptionAr","setDescriptionAr","ruleText","setRuleText","ruleTextAr","setRuleTextAr","updateQuoteData","title_ar","sub_title","sub_title_ar","description_ar","rule_text","rule_text_ar","refetch","useCreateQuoteMutation","makeNewQuote","user","useSelector","state","isAdmin","useGetAllQuotesQuery","allQuotes","useGetQuoteByIdQuery","quoteIsSuccess","isSuccess","useDeleteDecisionMutation","deleteDecision","useDeleteQAMutation","deleteQA","useCreateRequestMutation","createRequest","decisionSelectedValueRef","useRef","decisionValueRef","checkBox","checkIcon","selectedValue","setSelectedValue","email","setEmail","phone","setPhone","SendRequest","document","querySelector","classList","contains","allQuestions","querySelectorAll","forEach","remove","onclick","nextElementSibling","toggle","children","transform","PageTitle","src","arrow","alt","arrowAr","current","faAnglesDown","ref","decisions","length","map","index","add","textContent","closeCustomSelectedForm","RemoveForMoreThanId","faTrash","placeholder","StyledButton","color","borderColor","borderRightWidth","borderRightColor","borderLeftWidth","borderLeftColor","iconDir","faCheck","q_a","faPlus"],"sourceRoot":""}